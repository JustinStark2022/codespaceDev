services:
  database:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: kingdom_kids
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./node_backend
      dockerfile: Dockerfile
      target: development
    ports:
      - "5000:5000"
    env_file:
      - .env
      - .env.node_backend
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=${PORT:-5000}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:5173}
      - NPM_CONFIG_PRODUCTION=false
      - DATABASE_URL=postgresql://postgres:postgres@database:5432/kingdom_kids
    volumes:
      - ./node_backend:/node_backend
      - node_modules_backend:/node_backend/node_modules
    depends_on:
      database:
        condition: service_healthy
    command: npm run dev
    networks:
      - app-network

  client:
    build:
      context: ./client
      dockerfile: Dockerfile
      target: development
    ports:
      - "5173:5173"
    env_file:
      - .env
      - .env.client
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - VITE_API_URL=${VITE_API_URL:-http://localhost:5000}
      - VITE_FRONTEND_URL=${VITE_FRONTEND_URL:-http://localhost:5173}
      - NPM_CONFIG_PRODUCTION=false
    volumes:
      - ./client:/client
      - node_modules_client:/client/node_modules
    depends_on:
      - backend
    command: npm run dev -- --host 0.0.0.0
    networks:
      - app-network

volumes:
  node_modules_backend:
  node_modules_client:
  postgres_data:

networks:
  app-network:
    driver: bridge

