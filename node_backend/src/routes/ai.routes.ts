import { Router } from "express";
import { Request, Response } from "express";
import { llmService } from "../services/llm.service";
import { verifyToken } from "../middleware/auth.middleware";
import logger from "../utils/logger";
import { db } from "../db/db";
import {
  child_activity_logs,
  weekly_content_summaries,
} from "../db/schema";
import { eq, desc } from "drizzle-orm";

const router = Router();

interface AuthenticatedRequest extends Request {
  user?: {
    id: number;
    role: string;
  };
}

// Placeholder AI endpoints
router.get(
  "/health",
  verifyToken,
  (req: AuthenticatedRequest, res: Response) => {
    res.json({
      status: "AI service healthy",
      timestamp: new Date().toISOString(),
    });
  }
);

router.post(
  "/content-scan",
  verifyToken,
  (req: AuthenticatedRequest, res: Response) => {
    // Placeholder for content scanning AI
    const { content, type } = req.body;

    // Mock AI response
    res.json({
      contentId: Math.floor(Math.random() * 1000),
      flagged: false,
      confidence: 0.95,
      categories: [],
      scanTime: new Date().toISOString(),
    });
  }
);

// Chat endpoint
router.post(
  "/chat",
  verifyToken,
  async (req: AuthenticatedRequest, res: Response) => {
    try {
      const { message, context } = req.body;

      if (!message) {
        return res.status(400).json({ error: "Message is required" });
      }

      const response = await llmService.generateChatResponse(message, context);

      res.json({
        response,
        timestamp: new Date().toISOString(),
      });
    } catch (error: any) {
      logger.error("Chat AI error:", error);
      res.status(500).json({
        error: "Failed to generate response",
        response:
          "I'm having trouble connecting right now. Please try again in a moment.",
      });
    }
  }
);

// Verse of the day endpoint
router.get("/verse-of-the-day", async (req: Request, res: Response) => {
  try {
    const verse = await llmService.generateVerseOfTheDay();

    res.json({
      ...verse,
      timestamp: new Date().toISOString(),
    });
  } catch (error: any) {
    logger.error("Verse of the day AI error:", error);
    res.status(500).json({ error: "Failed to generate verse of the day" });
  }
});

// Devotional endpoint
router.get("/devotional", async (req: Request, res: Response) => {
  try {
    const { topic } = req.query;
    const devotional = await llmService.generateDevotional(topic as string);

    res.json({
      ...devotional,
      timestamp: new Date().toISOString(),
    });
  } catch (error: any) {
    logger.error("Devotional AI error:", error);
    res.status(500).json({ error: "Failed to generate devotional" });
  }
});

// Bible lesson generation endpoint
router.post(
  "/generate-lesson",
  verifyToken,
  async (req: AuthenticatedRequest, res: Response) => {
    try {
      const { topic, ageGroup, duration } = req.body;

      if (!topic) {
        return res.status(400).json({ error: "Topic is required" });
      }

      const systemPrompt = `You are a Christian educator creating Bible lessons for children.
    Create an engaging, age-appropriate Bible lesson with activities and application.
    Format as JSON with: title, scripture_reference, description, content, objectives, activities, age_range fields.`;

      const prompt = `Create a Bible lesson about "${topic}" for ${
        ageGroup || "children ages 6-12"
      } that takes about ${duration || 15} minutes.`;

      const response = await llmService.generateResponse({
        prompt,
        systemPrompt,
        maxTokens: 800,
        temperature: 0.7,
      });

      try {
        const lesson = JSON.parse(response.text);
        res.json({
          ...lesson,
          generated: true,
          timestamp: new Date().toISOString(),
        });
      } catch {
        // Fallback if JSON parsing fails
        res.json({
          title: `Lesson: ${topic}`,
          description: "A Bible lesson generated by AI",
          content: response.text,
          generated: true,
          age_range: ageGroup || "6-12",
          timestamp: new Date().toISOString(),
        });
      }
    } catch (error: any) {
      logger.error("Lesson generation AI error:", error);
      res.status(500).json({ error: "Failed to generate lesson" });
    }
  }
);

// Weekly content summary endpoint
router.get(
  "/weekly-summary/:familyId",
  verifyToken,
  async (req: AuthenticatedRequest, res: Response) => {
    try {
      const { familyId } = req.params;
      const userId = req.user?.id;

      // Verify user has access to this family's data
      if (parseInt(familyId) !== userId && req.user?.role !== "admin") {
        return res.status(403).json({ error: "Access denied" });
      }

      const summary = await llmService.generateWeeklySummary(parseInt(familyId));

      res.json({
        success: true,
        summary,
        timestamp: new Date().toISOString(),
      });
    } catch (error: any) {
      logger.error("Weekly summary generation error:", error);
      res.status(500).json({ error: "Failed to generate weekly summary" });
    }
  }
);

// Get existing weekly summaries
router.get(
  "/weekly-summaries",
  verifyToken,
  async (req: AuthenticatedRequest, res: Response) => {
    try {
      const userId = req.user?.id;

      if (!userId) {
        return res.status(401).json({ error: "Unauthorized" });
      }

      const summaries = await db
        .select()
        .from(weekly_content_summaries)
        .where(eq(weekly_content_summaries.family_id, userId))
        .orderBy(desc(weekly_content_summaries.generated_at))
        .limit(10);

      res.json({
        success: true,
        summaries,
      });
    } catch (error: any) {
      logger.error("Error fetching weekly summaries:", error);
      res.status(500).json({ error: "Failed to fetch summaries" });
    }
  }
);

// Log child activity for monitoring
router.post(
  "/log-activity",
  verifyToken,
  async (req: AuthenticatedRequest, res: Response) => {
    try {
      const { childId, activityType, activityName, platform, duration, contentCategory } = req.body;

      if (!childId || !activityType || !activityName) {
        return res.status(400).json({ error: "Missing required fields" });
      }

      await db.insert(child_activity_logs).values({
        child_id: childId,
        activity_type: activityType,
        activity_name: activityName,
        platform: platform || null,
        duration_minutes: duration || null,
        content_category: contentCategory || null,
      });

      res.json({ success: true, message: "Activity logged" });
    } catch (error: any) {
      logger.error("Error logging activity:", error);
      res.status(500).json({ error: "Failed to log activity" });
    }
  }
);

export default router;
